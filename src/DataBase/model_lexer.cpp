#line 2 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"

#line 4 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer model_create_buffer
#define yy_delete_buffer model_delete_buffer
#define yy_scan_buffer model_scan_buffer
#define yy_scan_string model_scan_string
#define yy_scan_bytes model_scan_bytes
#define yy_init_buffer model_init_buffer
#define yy_flush_buffer model_flush_buffer
#define yy_load_buffer_state model_load_buffer_state
#define yy_switch_to_buffer model_switch_to_buffer
#define yypush_buffer_state modelpush_buffer_state
#define yypop_buffer_state modelpop_buffer_state
#define yyensure_buffer_stack modelensure_buffer_stack
#define yy_flex_debug model_flex_debug
#define yyin modelin
#define yyleng modelleng
#define yylex modellex
#define yylineno modellineno
#define yyout modelout
#define yyrestart modelrestart
#define yytext modeltext
#define yywrap modelwrap
#define yyalloc modelalloc
#define yyrealloc modelrealloc
#define yyfree modelfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define model_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer model_create_buffer
#endif

#ifdef yy_delete_buffer
#define model_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer model_delete_buffer
#endif

#ifdef yy_scan_buffer
#define model_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer model_scan_buffer
#endif

#ifdef yy_scan_string
#define model_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string model_scan_string
#endif

#ifdef yy_scan_bytes
#define model_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes model_scan_bytes
#endif

#ifdef yy_init_buffer
#define model_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer model_init_buffer
#endif

#ifdef yy_flush_buffer
#define model_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer model_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define model_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state model_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define model_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer model_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define modelpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state modelpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define modelpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state modelpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define modelensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack modelensure_buffer_stack
#endif

#ifdef yylex
#define modellex_ALREADY_DEFINED
#else
#define yylex modellex
#endif

#ifdef yyrestart
#define modelrestart_ALREADY_DEFINED
#else
#define yyrestart modelrestart
#endif

#ifdef yylex_init
#define modellex_init_ALREADY_DEFINED
#else
#define yylex_init modellex_init
#endif

#ifdef yylex_init_extra
#define modellex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra modellex_init_extra
#endif

#ifdef yylex_destroy
#define modellex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy modellex_destroy
#endif

#ifdef yyget_debug
#define modelget_debug_ALREADY_DEFINED
#else
#define yyget_debug modelget_debug
#endif

#ifdef yyset_debug
#define modelset_debug_ALREADY_DEFINED
#else
#define yyset_debug modelset_debug
#endif

#ifdef yyget_extra
#define modelget_extra_ALREADY_DEFINED
#else
#define yyget_extra modelget_extra
#endif

#ifdef yyset_extra
#define modelset_extra_ALREADY_DEFINED
#else
#define yyset_extra modelset_extra
#endif

#ifdef yyget_in
#define modelget_in_ALREADY_DEFINED
#else
#define yyget_in modelget_in
#endif

#ifdef yyset_in
#define modelset_in_ALREADY_DEFINED
#else
#define yyset_in modelset_in
#endif

#ifdef yyget_out
#define modelget_out_ALREADY_DEFINED
#else
#define yyget_out modelget_out
#endif

#ifdef yyset_out
#define modelset_out_ALREADY_DEFINED
#else
#define yyset_out modelset_out
#endif

#ifdef yyget_leng
#define modelget_leng_ALREADY_DEFINED
#else
#define yyget_leng modelget_leng
#endif

#ifdef yyget_text
#define modelget_text_ALREADY_DEFINED
#else
#define yyget_text modelget_text
#endif

#ifdef yyget_lineno
#define modelget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno modelget_lineno
#endif

#ifdef yyset_lineno
#define modelset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno modelset_lineno
#endif

#ifdef yywrap
#define modelwrap_ALREADY_DEFINED
#else
#define yywrap modelwrap
#endif

#ifdef yyalloc
#define modelalloc_ALREADY_DEFINED
#else
#define yyalloc modelalloc
#endif

#ifdef yyrealloc
#define modelrealloc_ALREADY_DEFINED
#else
#define yyrealloc modelrealloc
#endif

#ifdef yyfree
#define modelfree_ALREADY_DEFINED
#else
#define yyfree modelfree
#endif

#ifdef yytext
#define modeltext_ALREADY_DEFINED
#else
#define yytext modeltext
#endif

#ifdef yyleng
#define modelleng_ALREADY_DEFINED
#else
#define yyleng modelleng
#endif

#ifdef yyin
#define modelin_ALREADY_DEFINED
#else
#define yyin modelin
#endif

#ifdef yyout
#define modelout_ALREADY_DEFINED
#else
#define yyout modelout
#endif

#ifdef yy_flex_debug
#define model_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug model_flex_debug
#endif

#ifdef yylineno
#define modellineno_ALREADY_DEFINED
#else
#define yylineno modellineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define modelwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[595] =
    {   0,
        2,    2,   14,   14,    0,    0,   93,   92,    9,   12,
       92,   10,    4,    2,    2,    1,    1,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,    7,    8,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,    6,    5,   92,    9,
       92,   14,   16,    0,    9,    0,   13,    0,   10,   11,
       10,    2,    1,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,   55,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
       14,   16,    0,    0,   10,    0,    3,    0,    0,    0,
        0,    0,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   34,   78,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   22,   22,   10,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   41,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
       82,    0,   47,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    0,    0,    0,
        0,    0,    0,    0,   44,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,   28,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,    0,    0,

        0,   84,    0,   72,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
       90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   45,    0,    0,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   77,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   62,    0,   89,   18,   37,
        0,    0,    0,    0,    0,    0,    0,   39,    0,    0,
        0,    0,   40,    0,    0,    0,    0,    0,    0,    0,
        0,   88,    0,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,   73,    0,    0,    0,   61,    0,
        0,   81,    0,    0,    0,    0,    0,   35,    0,    0,
        0,   36,    0,    0,   25,    0,    0,    0,    0,   42,

       38,    0,   87,    0,    0,   70,    0,   46,    0,   71,
       50,    0,   79,    0,    0,    0,   57,   59,    0,    0,
       53,    0,    0,    0,    0,    0,    0,   29,    0,    0,
       24,    0,   75,   76,   54,    0,    0,   58,    0,   49,
       51,    0,    0,    0,   48,    0,    0,    0,   32,    0,
        0,    0,    0,   74,    0,    0,    0,    0,    0,    0,
       80,   27,    0,   66,    0,    0,   23,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,   67,   68,   69,
        0,   60,    0,    0,    0,   85,    0,    0,    0,    0,
       31,   86,   33,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    7,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   21,   21,   21,
       34,    1,   35,   21,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   21,   21,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   21,   57,
       58,   59,   60,   21,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    3,    4,    4,    4,    4,
        4,    4,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1
    } ;

static const flex_int16_t yy_base[603] =
    {   0,
        0,    0,   61,  122,   68,   70,  740,  686,   78,  741,
       79,   81,  685,   65,   92,  101,  137,  684,   29,   40,
       98,  153,   67,   34,   39,   51,   56,   82,   66,  113,
       52,  109,   63,  149,   96,  118,  683,  682,  122,  132,
      131,  128,  181,   38,  141,  174,  150,  159,  187,  162,
      157,  164,  173,  170,  177,  167,  681,  680,  741,  730,
      727,    0,    0,  689,  727,  724,  741,  192,  724,  741,
       97,  227,  235,  242,  244,  678,    0,   99,  670,  672,
      209,  706,  680,  680,  248,  251,  698,  674,  672,  667,
      662,  659,  666,  690,  658,  689,  685,  672,  741,  741,

      662,  182,  657,  675,  665,  648,  660,  657,  128,  217,
      647,  647,  650,  661,  644,  655,  650,  645,  656,  642,
      209,  643,  637,  640,  634,  634,  646,  217,  638,  639,
      637,  629,  212,  635,  628,  642,  628,  631,  672,  741,
        0,    0,  621,  217,  164,  635,    0,  632,  624,  632,
      620,  629,  741,  631,  621,  637,  625,  623,  614,  621,
      620,  619,  623,  741,  741,  628,  618,  611,  605,  605,
      604,  636,  610,  609,  603,  595,  601,  606,  596,  594,
      594,  605,  593,  592,  225,  588,  598,  589,  588,  594,
      579,  596,  589,  578,  582,  588,  584,  586,  577,  741,

      584,  581,  582,  577,  584,  577,  574,  576,  569,  575,
      560,  741,  610,  610,  566,  564,  570,  554,  559,  552,
      551,  564,  588,  741,  741,  551,  550,  555,  574,  252,
      574,  544,  543,  547,  543,  542,  741,  551,  574,  550,
      741,  562,  741,  537,  559,  545,  548,  545,  569,  534,
      536,  526,  556,  539,  563,  537,  537,  523,  520,  531,
      532,  519,  542,  523,  516,  741,  522,  513,  512,  510,
      519,  522,  245,  508,  741,  513,  504,  520,  520,  511,
      507,  515,  507,  513,  741,  497,  508,  741,  500,  500,
      510,  498,  496,  741,  495,  489,  490,  487,  486,  494,

      483,  741,  500,  741,  487,  493,  488,  478,  491,  479,
      481,  488,  473,  472,  485,  488,  470,  478,  478,  484,
      465,  474,  477,  487,  475,  467,  250,  460,  468,  741,
      741,  475,  472,  464,  468,  468,  461,  454,  451,  463,
      449,  448,  447,  741,  463,  447,  442,  443,  451,  449,
      442,  452,  438,  438,  437,  441,  443,  447,  440,  457,
      443,  444,  436,  440,  432,  431,  431,  438,  430,  427,
      437,  436,  741,  433,  432,  433,  427,  410,  419,  741,
      411,  424,  427,  414,  408,  420,  423,  406,  417,  399,
      398,  431,  406,  408,  439,  399,  411,  395,  411,  406,

      392,  390,  741,  392,  390,  418,  417,  399,  399,  393,
      392,  395,  395,  380,  379,  384,  379,  391,  741,  375,
      374,  388,  378,  377,  370,  369,  376,  376,  370,  365,
      371,  364,  368,  367,  369,  741,  359,  741,  741,  382,
      397,  373,  355,  352,  358,  361,  364,  741,  352,  351,
      349,  354,  741,  376,  344,  343,  357,  355,  340,  354,
      351,  741,  347,  354,  336,  741,  331,  343,  350,  345,
      346,  330,  334,  337,  741,  333,  339,  320,  741,  333,
      338,  741,  327,  330,  316,  324,  325,  741,  326,  315,
      330,  741,  323,  322,  741,  325,  310,  317,  316,  741,

      741,  309,  741,  316,  304,  741,  300,  741,  302,  741,
      741,  316,  741,  304,  299,  313,  741,  741,  313,  311,
      741,  302,  300,  301,  307,  293,  298,  741,  308,  307,
      741,  296,  741,  741,  741,  294,  296,  741,  295,  741,
      741,  294,  291,  282,  741,  288,  294,  294,  741,  275,
      292,  283,  284,  741,  288,  274,  273,  272,  284,  283,
      741,  741,  278,  741,  308,  267,  741,  273,  261,  260,
      259,  268,  262,  260,  264,  741,  271,  741,  741,  741,
      255,  741,  236,  232,  231,  741,  228,  201,  153,  102,
      741,  741,  741,  741,  285,  289,  293,  297,  301,  303,

      307,   73
    } ;

static const flex_int16_t yy_def[603] =
    {   0,
      594,    1,  595,  595,  596,  596,  594,  594,  594,  594,
      597,  598,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      599,  600,  601,  594,  594,  597,  594,  597,  598,  594,
      598,  594,  594,  594,  594,  594,  602,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  599,  594,
      600,  601,  594,  597,  598,  594,  602,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  597,  598,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,    0,  594,  594,  594,  594,  594,  594,

      594,  594
    } ;

static const flex_int16_t yy_nxt[803] =
    {   0,
        8,    9,   10,   11,   12,    8,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
        8,   27,   28,   29,    8,   30,   31,   32,   33,   34,
       35,    8,   36,   37,   38,    8,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
        8,   53,   54,   55,    8,   56,    8,    8,    8,   57,
       58,   59,   60,   59,   61,   59,   59,   59,   59,   60,
       59,   60,   59,   72,   73,   73,  147,   79,   87,   65,
       74,   64,   67,   70,   80,   88,   64,   89,   81,  116,
       64,   64,   64,   98,   59,   59,   92,   90,   91,   70,

       93,   75,   75,   64,   64,   74,   95,   74,   64,   72,
       73,   73,  101,   82,   94,   64,   74,   64,   64,   64,
       59,   59,   59,   60,   59,   61,   59,   59,   59,   59,
       64,   68,   74,   71,   64,   96,   76,  145,   83,  143,
       97,   74,   84,  105,   64,   72,   73,   73,   64,  593,
       64,  148,   74,   64,  106,   59,   59,   77,   85,   99,
       85,   64,   86,   86,  102,   64,   70,  100,  109,  107,
       64,  103,  112,  177,   64,  178,  104,   74,  108,  110,
       64,   59,   59,   64,   64,  111,   85,  118,   85,   64,
       86,   86,  117,   64,  113,   67,  120,  121,  129,  122,

      124,   64,   64,  119,  169,   64,  592,  123,  130,   64,
      114,   64,  131,  132,   64,  138,   64,  214,  134,   64,
       67,  133,   64,  125,  135,   64,   64,  126,  136,   64,
      115,  170,  144,   64,  137,  127,   75,   75,  199,   64,
      591,  128,   74,   72,   73,   73,  250,   85,  191,   85,
       74,   86,   86,   75,   75,  151,  152,   86,   86,   74,
       86,   86,  179,  180,  192,  205,  206,   74,  200,  251,
      213,  290,  332,  381,  291,   74,  590,  382,  589,  588,
      587,  333,  292,  293,   74,   62,   62,   62,   62,   63,
       63,   63,   63,   66,   66,   66,   66,   69,   69,   69,

       69,  139,  139,  139,  139,  141,  141,  142,  586,  142,
      142,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,

      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,

      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  289,

      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,   70,   67,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  212,  140,  211,  210,  209,  208,
      207,  204,  203,  202,  201,  198,  197,  196,  195,  194,
      193,  190,  189,  188,  187,  186,  185,  184,  183,  182,

      181,  176,  175,  174,  173,  172,  171,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  150,  149,  146,   70,   67,   65,  143,
      140,   65,   64,   64,   64,   64,   78,   64,   64,  594,
        7,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594
    } ;

static const flex_int16_t yy_chk[803] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    6,    6,   14,   14,   14,  602,   19,   23,    9,
       14,   19,   11,   12,   20,   24,   24,   25,   20,   44,
       44,   25,   20,   31,    3,    3,   27,   26,   26,   71,

       27,   15,   15,   26,   31,   14,   29,   15,   27,   16,
       16,   16,   33,   21,   28,   33,   16,   14,   29,   23,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        9,   11,   15,   12,   28,   30,   15,   71,   21,   78,
       30,   16,   21,   35,   15,   17,   17,   17,   35,  590,
       21,   78,   17,   16,   36,    4,    4,   16,   22,   32,
       22,   32,   22,   22,   34,   30,  145,   32,   40,   39,
       36,   34,   42,  109,   39,  109,   34,   17,   39,   41,
       42,    4,    4,   41,   40,   41,   43,   46,   43,   17,
       43,   43,   45,   45,   43,   68,   47,   47,   50,   48,

       49,   34,   47,   46,  102,   22,  589,   48,   51,   51,
       43,   48,   52,   53,   50,   56,   52,  145,   54,   56,
      144,   53,   54,   49,   54,   53,   46,   49,   55,   55,
       43,  102,   68,   43,   55,   49,   72,   72,  128,   49,
      588,   49,   72,   73,   73,   73,  185,   74,  121,   74,
       73,   74,   74,   75,   75,   81,   81,   85,   85,   75,
       86,   86,  110,  110,  121,  133,  133,   72,  128,  185,
      144,  230,  273,  327,  230,   73,  587,  327,  585,  584,
      583,  273,  230,  230,   75,  595,  595,  595,  595,  596,
      596,  596,  596,  597,  597,  597,  597,  598,  598,  598,

      598,  599,  599,  599,  599,  600,  600,  601,  581,  601,
      601,  577,  575,  574,  573,  572,  571,  570,  569,  568,
      566,  565,  563,  560,  559,  558,  557,  556,  555,  553,
      552,  551,  550,  548,  547,  546,  544,  543,  542,  539,
      537,  536,  532,  530,  529,  527,  526,  525,  524,  523,
      522,  520,  519,  516,  515,  514,  512,  509,  507,  505,
      504,  502,  499,  498,  497,  496,  494,  493,  491,  490,
      489,  487,  486,  485,  484,  483,  481,  480,  478,  477,
      476,  474,  473,  472,  471,  470,  469,  468,  467,  465,
      464,  463,  461,  460,  459,  458,  457,  456,  455,  454,

      452,  451,  450,  449,  447,  446,  445,  444,  443,  442,
      441,  440,  437,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  379,  378,  377,  376,
      375,  374,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,

      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  329,  328,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  303,  301,  300,  299,
      298,  297,  296,  295,  293,  292,  291,  290,  289,  287,
      286,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      274,  272,  271,  270,  269,  268,  267,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  242,
      240,  239,  238,  236,  235,  234,  233,  232,  231,  229,

      228,  227,  226,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  211,  210,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  152,  151,
      150,  149,  148,  146,  143,  139,  138,  137,  136,  135,
      134,  132,  131,  130,  129,  127,  126,  125,  124,  123,
      122,  120,  119,  118,  117,  116,  115,  114,  113,  112,

      111,  108,  107,  106,  105,  104,  103,  101,   98,   97,
       96,   95,   94,   93,   92,   91,   90,   89,   88,   87,
       84,   83,   82,   80,   79,   76,   69,   66,   65,   64,
       61,   60,   58,   57,   38,   37,   18,   13,    8,    7,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
/*
 * This file is part of the EmCAD program which constitutes the client
 * side of an electromagnetic modeler delivered as a cloud based service.
 * 
 * Copyright (C) 2015-2020  Walter Steffe
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#line 22 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
 
#include <stdio.h>
#include <string.h>
#include <model_parser.hpp>
#include<ListUtils.h>
#include <Message.h>

extern char modelFileName[256];
int modelLineNum=1;

typedef struct {
  char fileName[256];
  int lineNum;
} fileState;

struct FileStack{
 DB::List_T *stack;
 FileStack(){
  stack=DB::List_Create(2, 2, sizeof(fileState *));
 }
 ~FileStack(){
   fileState *st;
   for(int i=0; i<List_Nbr(stack); i++){
    List_Read(stack,i,&st);
    delete(st);
   }

   DB::List_Delete(stack);
 }
 void push(char *fileName, int lineNum){
  fileState *st;
  st=new fileState();
  strcpy(st->fileName,fileName);
  st->lineNum=lineNum;
  DB::List_Add(stack,&st);
 }
 void pop(char *fileName, int &lineNum){
  fileState *st;
  DB::List_Pop(stack,&st);
  strcpy(fileName,st->fileName);
  lineNum=st->lineNum;
  delete(st);
 }
};

FileStack fStack;
extern int changedBinFile;



#line 1153 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"

#line 81 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;
#line 1159 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"
#line 1160 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"

#define INITIAL 0
#define expectID 1
#define incl 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 90 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"


#line 1382 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 595 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 594 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ modellval.ival = atoi(yytext); return INTEGER;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ modellval.fval = (double)atof(yytext); return FLOATING;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ sscanf(yytext, "0x%x", &modellval.ival); return INTEGER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ','; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return '}'; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return '{'; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 99 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return '['; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ']'; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 106 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ modelLineNum++;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 107 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ modelLineNum++;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 109 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ yytext[yyleng-1] = '\0'; modellval.sval = &yytext[1]; return STRING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ /*puts back ID onto the input stream as a string enclosed in '"' */
          			  /* yytext is copied because unput() trashes yytext */
					int i; 
                                        char *yycopy = new char [ strlen(yytext) + 1 ];
                                        strcpy(yycopy, yytext);
          				unput( '"' );
          				for ( i = yyleng - 1; i >= 0; --i ) unput( yycopy[i] );
          				unput( '"' );
          				delete [] yycopy ;
				}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 120 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ yytext[yyleng-1] = '\0'; modellval.sval = &yytext[1];
                                  BEGIN(INITIAL); return NAME;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ /* got the include file name */
        if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
            {
            fprintf( stderr, "Includes nested too deeply" );
            exit( 1 );
            }

        include_stack[include_stack_ptr++] =
            YY_CURRENT_BUFFER;

        fStack.push(modelFileName,modelLineNum);
        strcpy(modelFileName, yytext);
        changedBinFile=1;
        modelLineNum =1;

        yyin = fopen( yytext, "r" );

        if(!yyin){
         DB::Msg(ERROR, "Cannot open file %s\n", yytext);
	 return 0;
        }

        yy_switch_to_buffer(
            yy_create_buffer( yyin, YY_BUF_SIZE ) );

        BEGIN(INITIAL);
        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(expectID):
case YY_STATE_EOF(incl):
#line 151 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{
        if ( --include_stack_ptr < 0 )
            {
             yyterminate();
            }

        else
            {
             fStack.pop(modelFileName,modelLineNum);

             yy_delete_buffer( YY_CURRENT_BUFFER );
             yy_switch_to_buffer(
                 include_stack[include_stack_ptr] );
            }
        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 168 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return IMPORT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 170 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{BEGIN(incl);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 173 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ modellval.ival = 1; return INTEGER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 174 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ modellval.ival = 0; return INTEGER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 176 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ BEGIN(expectID); return DEF;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 177 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return SET;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 178 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MWM_MATERIAL; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 179 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MWM_VOLUME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 180 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MWM_UNITS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 181 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MWM_INVARIANT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 182 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ASSEMBLYTYPE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 183 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return LEVEL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 184 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tDIELECTRIC; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 185 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tHOLE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 186 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return DEFAULTBC; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 187 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return CIRCUITNAME; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 188 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tBOUNDARYCONDITION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 189 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tNET; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 190 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tCOMPONENT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 191 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tINTERFACE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 192 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tASSEMBLY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 193 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tWAVEGUIDE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 194 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tLINEPORT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 195 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tSPLITTER; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 196 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tGRID; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 197 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return tUNDEFINED; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 198 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 199 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return VOLTYPE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return LENGTH; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 201 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return FREQUENCY; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 202 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return BAND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 203 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return RESISTANCE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 204 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return INDUCTANCE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 205 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return IMPEDANCE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 206 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return LOSSFACTOR; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 207 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return QFACTOR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 208 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return SURFRATIO; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 209 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return BALLRADIUS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 210 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return RZ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 211 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return RQ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 212 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MODELTYPE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 213 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return EPSLORENTZ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 214 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MULORENTZ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 215 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return POLESRESIDUES; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 216 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return POLESNUM; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 217 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return SURFACE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 218 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ROUGH; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 219 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return EPSILONR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 220 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MUR; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 221 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ECONDUCTIVITY; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 222 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ECONDUCTIVITY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 223 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return HCONDUCTIVITY; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 224 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return HCONDUCTIVITY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 225 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ETANDELTA; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 226 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return HTANDELTA; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 227 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return COLOR; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 228 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MATERIAL; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 229 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return TEMPORTSNUM; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 230 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return TEPORTSNUM; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 231 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return TMPORTSNUM; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 232 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return GRIDNUM; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 233 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return PML; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 234 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return INVARIANT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 235 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return TRANSLATION; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 236 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ROTATION; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 237 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return AXIS; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 238 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ORIGIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 239 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return ANGLE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 240 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return MESHREFINEMENT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 241 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return CUTOFFREFINEMENT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 242 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return COMPSOLID; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 243 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return DISABLED; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 244 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return VOLUMES; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 245 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{ return SOLID; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 246 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
{
	   int c=0, bigBracket;
	   while ((c=yyinput()) != '[' && c != EOF) if (c== '\n') modelLineNum++;

	   bigBracket =1;
	   while (bigBracket && (c=yyinput())!=EOF) {
	      switch(c) {
		 case ']' :  bigBracket--;   break;
		 case '[' :  bigBracket++;   break;
		 case '\n':  modelLineNum++;    break;
		 case '#'  : /* skip comment */ {
		    do {c = yyinput();} while (c != '\n');
		    modelLineNum++;
             	 }
	      }
	   } 

	   while ((c=yyinput()) != '{' && c != EOF) if (c== '\n') modelLineNum++;

	   bigBracket =1;
	   while (bigBracket && (c=yyinput())!=EOF) {
	      switch(c) {
		 case '}' :  bigBracket--;   break;
		 case '{' :  bigBracket++;   break;
		 case '\n':  modelLineNum++;    break;
		 case '#'  : /* skip comment */ {
		    do {c = yyinput();} while (c != '\n');
		    modelLineNum++;
             	 }
	      }
	   } 
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 281 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"
ECHO;
	YY_BREAK
#line 1986 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 595 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 595 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 594);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 281 "/home/walter/MwCAD/EmCAD/EmCAD-dev/src/DataBase/model.l"



void SetInputFile(FILE *fp)
{
  modelLineNum = 1;
  yyrestart(fp);
}



